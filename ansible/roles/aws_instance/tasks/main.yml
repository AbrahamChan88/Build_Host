- name: Include vars
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ node_type }}.yml"

- name: Provision a {{ node_type }} ec2 instance in a defined AWS infrastructure
  ec2:
    key_name: "{{ ec2_keypair }}"
    group_id: "{{ item.sg_group_id }}"
    vpc_subnet_id: "{{ item.vpc_subnet_id }}"
    instance_type: "{{ instance_type }}"
    instance_profile_name: "{{ item.instance_profile_name }}"
    image: "{{ latest_centos_ami.results[1].ami_id }}"
    wait: yes
    region: "{{ region }}"
    exact_count: "{{ instance_count }}"
    count_tag:
      Name: "{{ instance_nametag }}"
    instance_tags:
      Name: "{{ instance_nametag }}"
      Owner: "{{ owner }}"
      AppID: "{{ item.tag_appid }}"
      Billing: "{{ item.tag_billing }}"
      Description: "{{ item.tag_description }}"
  with_items: "{{ defined_infra }}"
  register: ec2_result

- name: debug ec2
  debug: var=ec2_result
  when: debug in ['True', True]

- name: create {{ node_type }} r53 CNAME
  route53:
      state: present
      overwrite: true
      zone: "{{ r53_domain }}"
      record: "{{ namespace }}_{{ node_type }}_{{ region }}.{{ r53_domain }}"
      type: CNAME
      ttl: 30
      value: "{{ ec2_result.results[0].tagged_instances[0].private_dns_name }}"
      private_zone: yes #required if zone is private and not public (public_dns_name)
      wait: yes
  register: r53result

- name: debug r53
  debug: var=r53result
  when: debug in ['True', True]

- name: Update {{ node_type }} with newly created {{ namespace }}_{{ node_type }}_{{ region }}
  add_host:
    hostname: "{{ namespace }}_{{ node_type }}_{{ region }}"
    ansible_host: "{{ ec2_result.results[0].tagged_instances[0].private_ip }}"
    ansible_port: 22
    groups: controlbox_host
  register: host_addition
  when: node_type == "controlbox_node" and nat is defined and nat|bool != True

- name: Update {{ node_type }} with newly created {{ namespace }}_{{ node_type }}_{{ region }} NAT IP
  add_host:
    hostname: "{{ namespace }}_{{ node_type }}_{{ region }}.{{ r53_domain }}"
    ansible_host: 10.183.0.{{ ec2_result.results[0].tagged_instances[0].private_ip.split('.')[-1] }}
    ansible_port: 22
    groups: controlbox_host
  register: host_addition
  when: node_type == "controlbox_node" and nat is defined and nat|bool == True

- name: Update {{ node_type }} with newly created {{ namespace }}_{{ node_type }}_{{ region }}
  add_host:
    hostname: "{{ namespace }}_{{ node_type }}_{{ region }}"
    ansible_host: "{{ ec2_result.results[0].tagged_instances[0].private_ip }}"
    ansible_port: 22
    groups: webapp_host
  register: host_addition
  when: node_type == "webapp_node" and nat is defined and nat|bool != True

- name: Update {{ node_type }} with newly created {{ namespace }}_{{ node_type }}_{{ region }} NAT IP
  add_host:
    hostname: "{{ namespace }}_{{ node_type }}_{{ region }}.{{ r53_domain }}"
    ansible_host: 10.183.0.{{ ec2_result.results[0].tagged_instances[0].private_ip.split('.')[-1] }}
    ansible_port: 22
    groups: webapp_host
  register: host_addition
  when: node_type == "webapp_node" and nat is defined and nat|bool == True

- name: Update {{ node_type }} with newly created {{ namespace }}_{{ node_type }}_{{ region }}
  add_host:
    hostname: "{{ namespace }}_{{ node_type }}_{{ region }}"
    ansible_host: "{{ ec2_result.results[0].tagged_instances[0].private_ip }}"
    ansible_port: 22
    groups: jenkins_host
  register: host_addition
  when: node_type == "jenkins_node" and nat is defined and nat|bool != True

- name: Update {{ node_type }} with newly created {{ namespace }}_{{ node_type }}_{{ region }} NAT IP
  add_host:
    hostname: "{{ namespace }}_{{ node_type }}_{{ region }}.{{ r53_domain }}"
    ansible_host: 10.183.0.{{ ec2_result.results[0].tagged_instances[0].private_ip.split('.')[-1] }}
    ansible_port: 22
    groups: jenkins_host
  register: host_addition
  when: node_type == "jenkins_node" and nat is defined and nat|bool == True

- set_fact: host_setup_ip="{{ host_addition.add_host.host_vars.ansible_host }}"

- name: debug host ip information
  debug: var=host_setup_ip
  when: debug is defined and debug|bool == True